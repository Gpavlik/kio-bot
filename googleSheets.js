const { google } = require('googleapis');
const { GoogleAuth } = require('google-auth-library');

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Railway-–∑–º—ñ–Ω–Ω—É
const auth = new GoogleAuth({
  credentials: require('./service-account.json'),

  scopes: ['https://www.googleapis.com/auth/spreadsheets']
});

const sheets = google.sheets({ version: 'v4', auth });

// üìÑ ID —Ç–∞–±–ª–∏—Ü—ñ
const spreadsheetId = '1LHbfKAtkkbBk6noyZsad7_geQ-uWCWT2xtmKKKKK0Vo';

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏ –∑ –∞—Ä–∫—É—à–∞ Users
async function getUsersFromSheet() {
  try {
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: 'Users!A1:Z1000'
    });
    return res.data.values || [];
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:', error.message);
    throw error;
  }
}

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ chatId —î –≤ –∫–æ–ª–æ–Ω—Ü—ñ D
async function isVerified(chatId) {
  try {
    const rows = await getUsersFromSheet();
    return rows.some((row, index) => index > 0 && Number(row[3]) === Number(chatId));
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ—Å—Ç—É–ø—É:', error.message);
    return false;
  }
}

module.exports = {
  getUsersFromSheet,
  isVerified
};
