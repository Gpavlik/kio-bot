const fs = require('fs');
const path = require('path');

const USERS_FILE = path.join(__dirname, 'users.json');

let users = {};
let verifiedUsers = new Set();

// === –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É ===
function loadUsers() {
  try {
    const raw = fs.readFileSync(USERS_FILE);
    users = JSON.parse(raw);
    verifiedUsers = new Set(
      Object.entries(users)
        .filter(([_, u]) => u.verified)
        .map(([id]) => id)
    );
    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${verifiedUsers.size} –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
  } catch (err) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ users.json:', err.message);
    users = {};
    verifiedUsers = new Set();
  }
}

// === –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª ===
function saveUsers() {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
    console.log('üíæ users.json –æ–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (err) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ users.json:', err.message);
  }
}

// === –î–æ–¥–∞—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
function updateUser(chatId, data) {
  users[chatId] = {
    ...users[chatId],
    ...data
  };
  if (data.verified) verifiedUsers.add(chatId);
  saveUsers();
}

// === –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø ===
function isVerified(chatId) {
  return verifiedUsers.has(chatId);
}

// === –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
function getUser(chatId) {
  return users[chatId];
}

module.exports = {
  loadUsers,
  saveUsers,
  updateUser,
  isVerified,
  getUser,
  users,
  verifiedUsers
};
// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è
loadUsers();    