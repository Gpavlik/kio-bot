const fs = require('fs');
const path = require('path');

const USERS_FILE = path.join(__dirname, 'users.json');

let users = {};
let verifiedUsers = new Set();

// üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
function loadUsers() {
  try {
    if (fs.existsSync(USERS_FILE)) {
      const data = fs.readFileSync(USERS_FILE, 'utf-8');
      users = JSON.parse(data);
      for (const chatId in users) {
        if (users[chatId]?.verified) {
          verifiedUsers.add(Number(chatId));
        }
      }
      console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${Object.keys(users).length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
    } else {
      console.log('‚ÑπÔ∏è –§–∞–π–ª users.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π.');
      saveUsers();
    }
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è users.json:', err.message);
  }
}

// üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
function saveUsers() {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2), 'utf-8');
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è users.json:', err.message);
  }
}

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function updateUser(chatId, data) {
  users[chatId] = {
    ...users[chatId],
    ...data
  };
  if (data.verified) {
    verifiedUsers.add(Number(chatId));
  }
  saveUsers();
}

// üì§ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function getUser(chatId) {
  return users[chatId] || null;
}

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
async function isVerified(chatId) {
  return verifiedUsers.has(Number(chatId));
}

// üì¶ –ï–∫—Å–ø–æ—Ä—Ç
module.exports = {
  users,
  verifiedUsers,
  loadUsers,
  saveUsers,
  updateUser,
  getUser,
  isVerified
};
