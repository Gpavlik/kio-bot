require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const user = users[chatId]; 
const adminChatId = Number(process.env.ADMIN_CHAT_ID);
const users = {
  [adminChatId]: {
    name: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
    username: 'admin',
    orders: [],
    verificationRequested: false
  }
};

const verifiedUsers = new Set([adminChatId]);
const verificationRequests = {};
const activeOrders = {};
const pendingMessages = [];
const pendingTTN = {};
let currentReplyTarget = null;
const lastSent = {};
function getMainKeyboard(chatId) {
  if (!verifiedUsers.has(chatId)) return undefined;
  return {
    reply_markup: {
      keyboard: [
        ['üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'],
        ['üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å', 'üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'],
        ['‚ùì –ó–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è', '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏']
      ],
      resize_keyboard: true
    }
  };
}

function safeSend(chatId, text, options) {
  const now = Date.now();
  if (!lastSent[chatId] || now - lastSent[chatId] > 5000) {
    bot.sendMessage(chatId, text, options);
    lastSent[chatId] = now;
  }
}
bot.onText(/\/start/, (msg) => {

  const chatId = msg.chat.id;
  const user = users[chatId];
  const isAdmin = chatId === adminChatId;
  const { first_name, username } = msg.from;

  if (!users[chatId]) {
    users[chatId] = {
      name: first_name || '–ù–µ–≤—ñ–¥–æ–º–æ',
      username: username || '–Ω–µ–≤—ñ–¥–æ–º–æ',
      orders: [],
      verificationRequested: false
    };
  }

  if (users[chatId].justVerified) {
    users[chatId].justVerified = false;
    return;
  }

  if (!verifiedUsers.has(chatId)) {
    if (!users[chatId].verificationRequested) {
      users[chatId].verificationRequested = true;
      verificationRequests[chatId] = { step: 1, createdAt: Date.now() };
      bot.sendMessage(chatId, `üîê –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ü–Ü–ë:`);
    } else {
      bot.sendMessage(chatId, `‚è≥ –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...`);
    }
    return;
  }

  bot.sendMessage(chatId, `–í—ñ—Ç–∞—î–º–æ, ${first_name}! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É Kiomedine. –©–æ–± –ø–æ—á–∞—Ç–∏, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –Ω–∏–∂—á–µ:`, getMainKeyboard(chatId));
});
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const isAdmin = chatId === adminChatId;
  const user = users[chatId];

  if (!text) return;

  // üîê –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
  if (!verifiedUsers.has(chatId) && !isAdmin) {
    const request = verificationRequests[chatId];
    if (!request) return;

    if (Date.now() - request.createdAt > 24 * 60 * 60 * 1000) {
      delete verificationRequests[chatId];
      user.verificationRequested = false;
      bot.sendMessage(chatId, `‚õîÔ∏è –í–∞—à –∑–∞–ø–∏—Ç –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å. –ù–∞–¥—ñ—à–ª—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.`);
      return;
    }

    switch (request.step) {
      case 1:
        request.name = text;
        request.step = 2;
        bot.sendMessage(chatId, `üìû –í–≤–µ–¥—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:`);
        return;
      case 2:
        if (!/^(\+380|0)\d{9}$/.test(text)) {
          bot.sendMessage(chatId, `‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.`);
          return;
        }
        request.phone = text;
        request.step = 3;
        bot.sendMessage(chatId, `üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:`);
        return;
      case 3:
        request.town = text;
        request.step = 4;
        bot.sendMessage(chatId, `üè¢ –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏:`);
        return;
      case 4:
        request.workplace = text;
        request.step = 5;
        bot.sendMessage(chatId, `üë§ –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞, —è–∫–∏–π –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é:`);
        return;
      case 5:
        request.verifierName = text;
        request.step = 6;
        bot.sendMessage(chatId, `‚è≥ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.`);

        bot.sendMessage(adminChatId, `üîê –ó–∞–ø–∏—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é:\nüë§ ${request.name}\nüìû ${request.phone}\nüèôÔ∏è ${request.town}\nüè¢ ${request.workplace}\nüë§ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫: ${request.verifierName}\nüÜî chatId: ${chatId}`, {
          reply_markup: {
            inline_keyboard: [[{ text: '‚úÖ –ù–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø', callback_data: `verify_${chatId}` }]]
          }
        });
        return;
    }
    return;
  }

  // ‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
  if (isAdmin && currentReplyTarget) {
    bot.sendMessage(currentReplyTarget, `üì¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n${text}`);
    bot.sendMessage(chatId, `‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.`);

    const index = pendingMessages.findIndex(m => m.chatId === currentReplyTarget);
    if (index !== -1) pendingMessages.splice(index, 1);

    currentReplyTarget = null;
    return;
  }

  // ‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  if (activeOrders[chatId]?.questionMode) {
    pendingMessages.push({ chatId, username: user.username, text });
    delete activeOrders[chatId];
    bot.sendMessage(chatId, `‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.`);
    bot.sendMessage(adminChatId, `‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ @${user.username}:\n${text}`, {
      reply_markup: {
        inline_keyboard: [[{ text: '‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏', callback_data: `reply_${chatId}` }]]
      }
    });
    return;
  }

  // üõí –°—Ç–∞—Ä—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  if (text === 'üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è') {
    activeOrders[chatId] = {};
    bot.sendMessage(chatId, `üì¶ –°–∫—ñ–ª—å–∫–∏ –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?`);
    return;
  }

  // üßæ –ï—Ç–∞–ø–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const order = activeOrders[chatId];
  if (order) {
    if (!order.quantity) {
      if (!/^\d+$/.test(text)) {
        bot.sendMessage(chatId, `‚ùó –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É –≤–∏–≥–ª—è–¥—ñ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1, 2, 3...)`);
        return;
      }
      order.quantity = text;
      bot.sendMessage(chatId, `üèô –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:`);
      return;
    }

    if (!order.city) {
      order.city = text;
      bot.sendMessage(chatId, `üë§ –í–∫–∞–∂—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:`);
      return;
    }

    if (!order.address) {
      order.address = text;
      bot.sendMessage(chatId, `üìÆ –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:`);
      return;
    }

    if (!order.np) {
      order.np = text;
      bot.sendMessage(chatId, `üìû –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤‚Äô—è–∑–∫—É:`);
      order.phone = '__awaiting__';
      return;
    }

    if (order.phone === '__awaiting__') {
      if (!/^(\+380|0)\d{9}$/.test(text)) {
        bot.sendMessage(chatId, `‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.`);
        return;
      }

      order.phone = text;
      order.timestamp = Date.now();
      order.status = '–æ—á—ñ–∫—É—î';

      if (!users[chatId]) {
        users[chatId] = {
          name: msg.from.first_name || '–ù–µ–≤—ñ–¥–æ–º–æ',
          username: msg.from.username || '–Ω–µ–≤—ñ–¥–æ–º–æ',
          orders: [],
          verificationRequested: false
        };
      }

      users[chatId].orders.push(order);

      bot.sendMessage(chatId, `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!\n\nüì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${order.quantity}\nüèô –ú—ñ—Å—Ç–æ: ${order.city}\nüë§ –ü–Ü–ë: ${order.address}\nüìÆ –ù–ü: ${order.np}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}`);

      axios.post('https://script.google.com/macros/s/AKfycbzPr6BOEEd7125kVOOYFkTWw8qg3zoDKla50LSxEszMVvpMM60sVFaQn6k6VdH8Gec0/exec', {
        action: 'add',
        timestamp: order.timestamp,
        chatId: chatId,
        name: users[chatId].name,
        username: users[chatId].username,
        quantity: order.quantity,
        city: order.city,
        address: order.address,
        np: order.np,
        phone: order.phone,
        status: order.status
      }).then(() => {
        console.log(`‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ –¥–ª—è ${order.address}`);
      }).catch((err) => {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${err.message}`);
        bot.sendMessage(adminChatId, `‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ @${users[chatId].username}: ${err.message}`);
      });

      bot.sendMessage(adminChatId, `üì¨ –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –≤—ñ–¥ @${users[chatId].username}\n\nüì¶ ${order.quantity} —à—Ç\nüèô ${order.city}\nüë§ ${order.address}\nüìÆ –ù–ü: ${order.np}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏', callback_data: `accept_${chatId}_${order.timestamp}` },
              { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `cancel_${chatId}_${order.timestamp}` }
            ],
            [
              { text: 'üì¶ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¢–¢–ù', callback_data: `ttn_${chatId}_${order.timestamp}` }
            ]
          ]
        }
      });

      delete activeOrders[chatId];
      return;
    }
  }
});

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
   const user = users[chatId]; 
  const isAdmin = chatId === adminChatId;
  const text = msg.text;
// ‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
if (text === '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è') {
  bot.sendMessage(chatId, `KioMedinevsOne ‚Äî –º–µ–¥–∏—á–Ω–∏–π –≤–∏—Ä—ñ–± –¥–ª—è –≤—ñ—Å–∫–æ—Å—É–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó —Å–∏–Ω–æ–≤—ñ–∞–ª—å–Ω–æ—ó —Ä—ñ–¥–∏–Ω–∏ –ø—Ä–∏ —Å–∏–º–ø—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É –ª—ñ–∫—É–≤–∞–Ω–Ω—ñ –æ—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç—É –∫–æ–ª—ñ–Ω–Ω–æ–≥–æ —Å—É–≥–ª–æ–±–∞.`, {
    reply_markup: {
      keyboard: [
        ['üõ† –î—ñ—è', 'üì¶ –°–∫–ª–∞–¥'],
        ['‚öôÔ∏è –ï—Ñ–µ–∫—Ç', '‚ö†Ô∏è –£–≤–∞–≥–∞'],
        ['üí° –ö–ª—ñ–Ω—ñ—á–Ω—ñ –≤–∏–ø–∞–¥–∫–∏'],
        ['üìù –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è', 'üîô –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    }
  });
  return;
}

// üîô –ù–∞–∑–∞–¥
if (text === 'üîô –ù–∞–∑–∞–¥') {
  bot.sendMessage(chatId, `üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.`, getMainKeyboard(chatId));
  return;
}

// üõ† –î—ñ—è
if (text === 'üõ† –î—ñ—è') {
  bot.sendMessage(chatId, `–û—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç ‚Äî –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–µ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è... [—Ç–µ–∫—Å—Ç –ø–æ–≤–Ω–∏–π, —è–∫ —É —Ç–≤–æ—î–º—É –∫–æ–¥—ñ]`);
  return;
}

// üì¶ –°–∫–ª–∞–¥
if (text === 'üì¶ –°–∫–ª–∞–¥') {
  bot.sendMessage(chatId, `–ö–æ–∂–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞ KioMedinevsOne –º—ñ—Å—Ç–∏—Ç—å... [—Ç–µ–∫—Å—Ç –ø–æ–≤–Ω–∏–π]`);
  return;
}

// ‚öôÔ∏è –ï—Ñ–µ–∫—Ç
if (text === '‚öôÔ∏è –ï—Ñ–µ–∫—Ç') {
  bot.sendMessage(chatId, `–û–¥–∏–Ω –∫—É—Ä—Å –ª—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥–±–∞—á–∞—î... [—Ç–µ–∫—Å—Ç –ø–æ–≤–Ω–∏–π]`);
  return;
}

// ‚ö†Ô∏è –£–≤–∞–≥–∞
if (text === '‚ö†Ô∏è –£–≤–∞–≥–∞') {
  bot.sendMessage(chatId, `‚Ä¢ –ü—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è —Ç–∞ –∑–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è... [—Ç–µ–∫—Å—Ç –ø–æ–≤–Ω–∏–π]`);
  return;
}

// üìù –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
if (text === 'üìù –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è') {
  bot.sendMessage(chatId, `–ü–µ—Ä–µ–¥ –∫–æ–∂–Ω–æ—é —ñ–Ω'—î–∫—Ü—ñ—î—é KioMedinevsOne... [—Ç–µ–∫—Å—Ç –ø–æ–≤–Ω–∏–π]`);
  return;
}

// üí° –ö–ª—ñ–Ω—ñ—á–Ω—ñ –≤–∏–ø–∞–¥–∫–∏
if (text === 'üí° –ö–ª—ñ–Ω—ñ—á–Ω—ñ –≤–∏–ø–∞–¥–∫–∏') {
  bot.sendDocument(chatId, './KioMedine Patient Cases_v2.0.0.pdf', {
    caption: 'üìÑ –ö–ª—ñ–Ω—ñ—á–Ω—ñ –≤–∏–ø–∞–¥–∫–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—Ä–µ–ø–∞—Ä–∞—Ç—É',
    contentType: 'application/pdf'
  });
  return;
}

// üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å
if (text === 'üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å') {
  if (!user.orders.length) {
    bot.sendMessage(chatId, `üì≠ –£ –í–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.`);
    return;
  }

  let historyText = `üïò –Ü—Å—Ç–æ—Ä—ñ—è –í–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:\n\n`;
  user.orders.forEach((order, index) => {
    historyText += `#${index + 1}\nüì¶ ${order.quantity} —à—Ç\nüèô ${order.city}\nüè† ${order.address}\nüìÆ –ù–ü: ${order.np}\nüìû ${order.phone}\nüìå –°—Ç–∞—Ç—É—Å: ${order.status || '–æ—á—ñ–∫—É—î'}\n\n`;
  });

  bot.sendMessage(chatId, historyText);
  return;
}

// ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏
if (text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏') {
  if (activeOrders[chatId]) {
    delete activeOrders[chatId];
    bot.sendMessage(chatId, `‚õîÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.`);
    return;
  }

  const lastOrder = user.orders[user.orders.length - 1];
  if (!lastOrder) {
    bot.sendMessage(chatId, `‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`);
    return;
  }

  if (lastOrder.status === '–ø—Ä–∏–π–Ω—è—Ç–æ') {
    bot.sendMessage(chatId, `‚õîÔ∏è –ü—Ä–∏–π–Ω—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.`);
    return;
  }

  lastOrder.status = '—Å–∫–∞—Å–æ–≤–∞–Ω–æ';
  bot.sendMessage(chatId, `‚ùå –û—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–µ.`);

  axios.post('https://script.google.com/macros/s/AKfycbzPr6BOEEd7125kVOOYFkTWw8qg3zoDKla50LSxEszMVvpMM60sVFaQn6k6VdH8Gec0/exec', {
    action: 'updateStatus',
    timestamp: lastOrder.timestamp,
    chatId: chatId,
    status: '—Å–∫–∞—Å–æ–≤–∞–Ω–æ'
  }).then(() => {
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ');
    bot.sendMessage(adminChatId, `‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ @${user.username} –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.`);
  }).catch((err) => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', err.message);
    bot.sendMessage(adminChatId, `‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å: ${err.message}`);
  });
  return;
}

// ‚ùì –ó–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
if (text === '‚ùì –ó–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è') {
  bot.sendMessage(chatId, `‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`);
  activeOrders[chatId] = { questionMode: true };
  return;
}

// üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
if (text === 'üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º') {
  bot.sendContact(chatId, '+380932168041', '–û–ø–µ—Ä–∞—Ç–æ—Ä');
  return;
}

if (isAdmin && pendingTTN[chatId]) {
  const { targetId, timestamp } = pendingTTN[chatId];
  const user = users[targetId];
  const order = user?.orders?.find(o => o.timestamp == Number(timestamp));
  if (!order) {
    bot.sendMessage(chatId, `‚õîÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
    delete pendingTTN[chatId];
    return;
  }

  order.ttn = text;
  bot.sendMessage(targetId, `üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–ù–æ–º–µ—Ä –¢–¢–ù: ${text}`);
  bot.sendMessage(chatId, `‚úÖ –¢–¢–ù –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.`);

  axios.post('https://script.google.com/macros/s/AKfycbzPr6BOEEd7125kVOOYFkTWw8qg3zoDKla50LSxEszMVvpMM60sVFaQn6k6VdH8Gec0/exec', {
    action: 'updateTTN',
    timestamp: order.timestamp,
    chatId: targetId,
    ttn: text
  }).catch((err) => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¢–¢–ù:', err.message);
    bot.sendMessage(adminChatId, `‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¢–¢–ù: ${err.message}`);
  });

  delete pendingTTN[chatId];
  return;
}

});
bot.on('callback_query', (query) => {
  const data = query.data;
  const adminId = query.message.chat.id;
  const isAdmin = chatId === adminChatId;
   const user = users[chatId]; 

  // üîê –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
  if (data.startsWith('verify_')) {
    const targetId = parseInt(data.split('_')[1], 10);
    const request = verificationRequests[targetId];
    if (!request || !users[targetId]) {
      bot.answerCallbackQuery(query.id, { text: '‚õîÔ∏è –ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.' });
      return;
    }

    verifiedUsers.add(targetId);
    users[targetId].verificationRequested = false;
    users[targetId].justVerified = true;

    axios.post('https://script.google.com/macros/s/AKfycbzPr6BOEEd7125kVOOYFkTWw8qg3zoDKla50LSxEszMVvpMM60sVFaQn6k6VdH8Gec0/exec', {
      action: 'addUser',
      timestamp: Date.now(),
      chatId: targetId,
      name: request.name,
      username: users[targetId].username,
      phone: request.phone,
      town: request.town,
      workplace: request.workplace,
      verifierName: request.verifierName
    });

    delete verificationRequests[targetId];

    bot.sendMessage(targetId, `üîì –í–∞–º –Ω–∞–¥–∞–Ω–æ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞.`, getMainKeyboard(targetId));
    bot.sendMessage(adminChatId, `‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @${users[targetId].username} (${targetId})`);
    bot.answerCallbackQuery(query.id, { text: '–î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ ‚úÖ' });
    return;
  }

  // ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  if (data.startsWith('accept_')) {
    const [_, targetId, timestamp] = data.split('_');
    const user = users[targetId];
    const order = user?.orders?.find(o => o.timestamp == Number(timestamp));
    if (!order || order.status === '—Å–∫–∞—Å–æ–≤–∞–Ω–æ') {
      bot.answerCallbackQuery(query.id, { text: '‚õîÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.' });
      return;
    }
    if (order.status === '–ø—Ä–∏–π–Ω—è—Ç–æ') {
      bot.answerCallbackQuery(query.id, { text: '‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ.' });
      return;
    }

    axios.post('https://script.google.com/macros/s/AKfycbzPr6BOEEd7125kVOOYFkTWw8qg3zoDKla50LSxEszMVvpMM60sVFaQn6k6VdH8Gec0/exec', {
      action: 'updateStatus',
      timestamp: order.timestamp,
      chatId: targetId,
      status: '–ø—Ä–∏–π–Ω—è—Ç–æ'
    }).then(() => {
      order.status = '–ø—Ä–∏–π–Ω—è—Ç–æ';
      bot.sendMessage(targetId, `üöö –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ —ñ –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ!`);
      bot.sendMessage(adminChatId, `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ @${user.username} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ "–ø—Ä–∏–π–Ω—è—Ç–æ".`);
      bot.answerCallbackQuery(query.id, { text: '‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ' });
    }).catch((err) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', err.message);
      bot.answerCallbackQuery(query.id, { text: '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è' });
    });
    return;
  }

  // ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  if (data.startsWith('cancel_')) {
    const [_, targetId, timestamp] = data.split('_');
    const user = users[targetId];
    const order = user?.orders?.find(o => o.timestamp == Number(timestamp));
    if (!order || order.status === '–ø—Ä–∏–π–Ω—è—Ç–æ') {
      bot.answerCallbackQuery(query.id, { text: '‚õîÔ∏è –ù–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–∏–π–Ω—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.' });
      return;
    }

    axios.post('https://script.google.com/macros/s/AKfycbzPr6BOEEd7125kVOOYFkTWw8qg3zoDKla50LSxEszMVvpMM60sVFaQn6k6VdH8Gec0/exec', {
      action: 'updateStatus',
      timestamp: order.timestamp,
      chatId: targetId,
      status: '—Å–∫–∞—Å–æ–≤–∞–Ω–æ'
    }).then(() => {
      order.status = '—Å–∫–∞—Å–æ–≤–∞–Ω–æ';
      bot.sendMessage(targetId, `‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.`);
      bot.sendMessage(adminChatId, `‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ @${user.username} –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.`);
      bot.answerCallbackQuery(query.id, { text: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ' });
    }).catch((err) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', err.message);
      bot.answerCallbackQuery(query.id, { text: '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è' });
    });
    return;
  }

  // üì¶ –í–≤–µ–¥–µ–Ω–Ω—è –¢–¢–ù
  if (data.startsWith('ttn_')) {
    const [_, targetId, timestamp] = data.split('_');
    pendingTTN[adminId] = { targetId, timestamp };
    bot.sendMessage(adminId, `‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –¢–¢–ù –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${targetId}:`);
    bot.answerCallbackQuery(query.id);
    return;
  }



  // ‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
  if (data.startsWith('reply_')) {
    currentReplyTarget = parseInt(data.split('_')[1], 10);
    bot.sendMessage(adminId, `‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${currentReplyTarget}`);
    bot.answerCallbackQuery(query.id);
    return;
  }
});
// üßæ –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
bot.onText(/\/adminpanel/, (msg) => {
  const chatId = msg.chat.id;
  const isAdmin = chatId === adminChatId;
   const user = users[chatId]; 
  if (!isAdmin ) {
    bot.sendMessage(chatId, '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–Ω–µ–ª—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
    return;
  }

  const adminKeyboard = {
    reply_markup: {
      keyboard: [
        ['üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
        ['üì© –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É', 'üöö –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  };

  bot.sendMessage(chatId, `üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`, adminKeyboard);
});

// ‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ /reply
bot.onText(/\/reply (\d+) (.+)/, (msg, match) => {
  if (msg.chat.id !== adminChatId) return;
  const targetId = parseInt(match[1], 10);
  const isAdmin = chatId === adminChatId;
   const user = users[chatId]; 
  const replyText = match[2];
  bot.sendMessage(targetId, `üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n${replyText}`);
  bot.sendMessage(adminChatId, `‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.`);
});

// üöö –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ /send
bot.onText(/\/send (\d+)/, (msg, match) => {
  if (msg.chat.id !== adminChatId) return;
  const targetId = parseInt(match[1], 10);
  const isAdmin = chatId === adminChatId;
  const user = users[targetId];
  if (!user || !user.orders || user.orders.length === 0) {
    bot.sendMessage(adminChatId, `‚õîÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
    return;
  }

  const order = user.orders[user.orders.length - 1];
  if (order.status === '—Å–∫–∞—Å–æ–≤–∞–Ω–æ') {
    bot.sendMessage(adminChatId, `‚õîÔ∏è –¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.`);
    return;
  }

  if (order.status !== '–ø—Ä–∏–π–Ω—è—Ç–æ') {
    axios.post('https://script.google.com/macros/s/AKfycbzPr6BOEEd7125kVOOYFkTWw8qg3zoDKla50LSxEszMVvpMM60sVFaQn6k6VdH8Gec0/exec', {
      action: 'updateStatus',
      timestamp: order.timestamp,
      chatId: targetId,
      status: '–ø—Ä–∏–π–Ω—è—Ç–æ'
    }).then(() => {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å "–ø—Ä–∏–π–Ω—è—Ç–æ" –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ');
      order.status = '–ø—Ä–∏–π–Ω—è—Ç–æ';
    }).catch((err) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', err.message);
    });
  }

  bot.sendMessage(targetId, `üöö –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ! –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–≤—ñ—Ä—É ‚ù§Ô∏è`);
  bot.sendMessage(adminChatId, `‚úÖ –î–æ—Å—Ç–∞–≤–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.`);
});

// ‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤—Ä—É—á–Ω—É
bot.onText(/\/verify (\d+)/, (msg, match) => {
  if (msg.chat.id !== adminChatId) return;
  const targetId = parseInt(match[1], 10);
  const isAdmin = chatId === adminChatId;
   const user = users[chatId]; 
  verifiedUsers.add(targetId);
  if (users[targetId]) users[targetId].verificationRequested = false;
  users[targetId].justVerified = true;
  bot.sendMessage(adminChatId, `‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${targetId} –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π.`);
  bot.sendMessage(targetId, `üîì –í–∞–º –Ω–∞–¥–∞–Ω–æ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞. –ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è.`, getMainKeyboard(targetId));
});

// üö´ –í—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
bot.onText(/\/unverify (\d+)/, (msg, match) => {
  if (msg.chat.id !== adminChatId) return;
  const targetId = parseInt(match[1], 10);
  const isAdmin = chatId === adminChatId;
   const user = users[chatId]; 
  verifiedUsers.delete(targetId);
  bot.sendMessage(adminChatId, `üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${targetId} –±—ñ–ª—å—à–µ –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É.`);
  bot.sendMessage(targetId, `üîí –í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –±—É–ª–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.`);
});

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
   const user = users[chatId]; 
  const text = msg.text;
  const isAdmin = chatId === adminChatId;

  if (!isAdmin) return;

  if (text === 'üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è') {
    let report = 'üìã –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n';
    let found = false;

    for (const uid in users) {
      const user = users[uid];
      if (!user.orders || user.orders.length === 0) continue;

      found = true;
      report += `üë§ @${user.username} (${user.name})\n`;
      user.orders.forEach((order, i) => {
        report += `  #${i + 1} üì¶ ${order.quantity} —à—Ç\n  üèô ${order.city}\n  üè† ${order.address}\n  üìÆ –ù–ü: ${order.np}\n  üìû ${order.phone}\n  üìå –°—Ç–∞—Ç—É—Å: ${order.status || '–æ—á—ñ–∫—É—î'}\n\n`;
      });
    }

    bot.sendMessage(chatId, found ? report : 'üì≠ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.');
    return;
  }

  if (text === 'üì© –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É') {
    bot.sendMessage(chatId, `‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n/reply [chatId] [—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]`);
    return;
  }

  if (text === 'üöö –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É') {
    bot.sendMessage(chatId, `üì¶ –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n/send [chatId]`);
    return;
  }

  if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
    let totalOrders = 0;
    let totalUsers = Object.keys(users).length;
    let totalQuantity = 0;

    for (const uid in users) {
      const user = users[uid];
      user.orders.forEach(order => {
        totalOrders++;
        const qty = parseInt(order.quantity);
        if (!isNaN(qty)) totalQuantity += qty;
      });
    }

    const stats = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${totalUsers}\nüì¶ –ó–∞–º–æ–≤–ª–µ–Ω—å: ${totalOrders}\nüìà –°—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É: ${totalQuantity} —à—Ç`;
    bot.sendMessage(chatId, stats);
    return;
  }

  if (text === 'üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –º–µ–Ω—é') {
    bot.sendMessage(chatId, `üîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é...`, getMainKeyboard(chatId));
    return;
  }
});

// üßØ Polling error
bot.on("polling_error", (error) => {
  console.error("‚ùå Polling error:", error.message);
});

// üöÄ –ó–∞–ø—É—Å–∫
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...');
bot.sendMessage(adminChatId, 'ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.');
